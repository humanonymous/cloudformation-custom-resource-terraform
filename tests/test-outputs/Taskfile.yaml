version: "3"

set:
  - errexit
  - nounset
  - pipefail

includes:
  lib:
    taskfile: ../lib.yaml

tasks:
  run-test:
    desc: Tests the outputs work as they should
    cmds:
      - echo "--- --- --- --- ---"
      - defer: { task: cleanup }
      - task: set-up
      - task: create

  set-up:
      - task: lib:set-up:empty

  create:
    desc: "Set up resources and deploy {{.TEST_NAME}} stack for CREATE phase"
    cmds:
      # Create
      - echo "ðŸš€ Running CREATE phase for stack \"{{.TESTS_SOFTWARE_NAME}}-tests-{{.TEST_NAME}}\""
      - task: lib:deploy-stack
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          TEMPLATE_FILE: templates/Create.yaml
      - task: lib:assert-stack-status
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          EXPECTED_STATUS: CREATE_COMPLETE
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: String
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: String
          EXPECTED_VALUE: "create success"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Number
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Number
          EXPECTED_VALUE: "1"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Boolean
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Boolean
          EXPECTED_VALUE: "true"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: List
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: List
          EXPECTED_VALUE: "create, success, !"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Set
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Set
          EXPECTED_VALUE: "create, success, !"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: MapAsString
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: MapAsString
          EXPECTED_VALUE: '{\""Key1"\":\""create"\",\""Key2"\":\""success"\",\""Key3"\":\""!"\"}'
      # Update - check that the output is changes on update
      - echo "ðŸš€ Running UPDATE phase for stack \"{{.TESTS_SOFTWARE_NAME}}-tests-{{.TEST_NAME}}\""
      - task: lib:deploy-stack
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          TEMPLATE_FILE: templates/Update.yaml
      - task: lib:assert-stack-status
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          EXPECTED_STATUS: UPDATE_COMPLETE
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: String
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: String
          EXPECTED_VALUE: "update success"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Number
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Number
          EXPECTED_VALUE: "2"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Boolean
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Boolean
          EXPECTED_VALUE: "false"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: List
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: List
          EXPECTED_VALUE: "update, success, !"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Set
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: Set
          EXPECTED_VALUE: "update, success, !"
      - task: lib:assert-output-present
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: MapAsString
      - task: lib:assert-output-value
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
          OUTPUT_KEY: MapAsString
          EXPECTED_VALUE: '{\""Key1"\":\""update"\",\""Key2"\":\""success"\",\""Key3"\":\""!"\"}'

  cleanup:
    desc: "Clean up the {{.TEST_NAME}} stack after tests"
    cmds:
      - task: lib:cleanup
        vars:
          TEST_NAME: "{{.TEST_NAME}}"
